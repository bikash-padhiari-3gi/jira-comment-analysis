AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Combined SAM Template for Lambda function and API Gateway

Globals:
  Function:
    Timeout: 30
    MemorySize: 256

Resources:
  MyLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: comment_analysis.lambda_handler
      Runtime: python3.11  # Updated to a supported version
      Role: !GetAtt LambdaExecutionRole.Arn
      FunctionName: jira-analysis
      Description: My Lambda function
      CodeUri:
        Bucket: lambda-code-zipfile-bucket  # Specify S3 bucket
        Key: comment_analysis.zip          # Specify S3 key
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref JiraAnalysisTopic

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ComprehendPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: comprehend:DetectSentiment
                Resource: "*"
        - PolicyName: SNSNotificationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sns:Publish
                Resource: !Ref JiraAnalysisTopic
        - PolicyName: BedrockPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - bedrock:ListFoundationModels
                  - bedrock:GetFoundationModel
                  - bedrock:InvokeModel
                Resource: "*"
        - PolicyName: CloudWatchLogsPolicy  # Added CloudWatch Logs permissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:log-group:/aws/lambda/jira-analysis*

  JiraAnalysisTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Jira Analysis Topic
      TopicName: jira-analysis-topic

  MyApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: '2.0'
        info:
          title: API Gateway for Jira Analysis
          version: '1.0'
        paths:
          /jira-analysis:
            post:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy

  MyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/jira-analysis
      RetentionInDays: 14  # Optional: Specify how long to retain logs

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt MyLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/*/*"

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/jira-analysis"

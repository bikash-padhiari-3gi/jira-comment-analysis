AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Combined SAM Template for Lambda function and API Gateway
Globals:
  Function:
    Timeout: 30
    MemorySize: 256
Resources:
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: comment_analysis.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      FunctionName: jira-analysis
      Description: My Lambda function
      Code:
        S3Bucket: lambda-code-zipfile-bucket
        S3Key: comment_analysis.zip
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref JiraAnalysisTopic

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ComprehendPolicy
          PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: comprehend:DetectSentiment
              Resource: "*"

        - PolicyName: SNSNotificationPolicy
          PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: sns:Publish
              Resource: !Ref JiraAnalysisTopic

        - PolicyName: BedrockPolicy
          PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: 
                - bedrock:ListFoundationModels
                - bedrock:GetFoundationModel
                - bedrock:InvokeModel
              Resource: "*"
    Metadata:
      SamResourceId: MyLambdaFunction
      Dependencies:
        - requests

  JiraAnalysisTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Jira Analysis Topic
      TopicName: jira-analysis-topic
  MyApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: '2.0'
        info:
          title: API Gateway for Jira Analysis
          version: '1.0'
        paths:
          /jira-analysis:
            post:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
    Metadata:
      SamResourceId: MyApiGateway
  MyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/jira-analysis
    Metadata:
      SamResourceId: MyLogGroup
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt MyLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/*/*/jira-analysis"
